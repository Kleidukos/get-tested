name: "Test supported GHC versions"
description: "Generate a test matrix from your cabal file's `tested-with` stanza"

inputs:
  cabal-file:
    description: "The path to your cabal file, e.g. somefolder/myproject.cabal"
    required: true
  version:
    description: "Version of the get-tested tool"
    required: false
    default: ""
  windows:
    description: "Enable Windows runner, latest version"
    required: false
    default: 'false'
    deprecationMessage: "Please use 'windows-version: latest' instead."
  windows-version:
    description: "Enable Windows runner. If both `windows` and `windows-version` inputs are set, the explicit version will take priority"
    required: false
    default: ""
  macos:
    description: "Enable macOS runner, latest version"
    required: false
    default: 'false'
    deprecationMessage: "Please use 'macos-version: latest' instead."
  macos-version:
    description: "Enable macOS runner.  If both `macos` and `macos-version` inputs are set, the explicit version will take priority"
    required: false
    default: ""
  ubuntu:
    description: "Enable Ubuntu runner, latest version"
    required: false
    default: 'false'
    deprecationMessage: "Please use 'ubuntu-version: latest' instead."
  ubuntu-version:
    description: "Enable Ubuntu runner.  If both `ubuntu` and `ubuntu-version` inputs are set, the explicit version will take priority"
    required: false
    default: ""
  newest:
    description: "Enable only the newest GHC version found in the cabal file"
    required: false
    default: 'false'
  oldest:
    description: "Enable only the oldest GHC version found in the cabal file"
    required: false
    default: 'false'

outputs:
  matrix:
    description: "The GHC version matrix"
    value: ${{ steps.set-matrix.outputs.matrix }}

runs:
  using: "composite"
  steps:
    - name: Checkout base repo
      uses: actions/checkout@v4

      # The following does not work:
      #
      #   uses: Kleidukos/get-tested/setup-get-tested@${{ github.action_ref }}
      #
      # See: https://github.com/actions/runner/issues/895
    - name: Set up get-tested
      uses: webdevred/get-tested-intern/setup-get-tested@79bb8c79180288846b4280b2811877bdeb9770e1
      with:
        version: ${{ inputs.version }}

    - name: Set up Windows options
      shell: bash
      run: |
        echo "::debug::windows: ${{ inputs.windows-version }}"
        if [[ "${{ inputs.windows-version }}" != "" ]]
        then
          echo "::debug::Windows explicit enabled: ${{ inputs.windows-version }}"
          echo "WINDOWS=--windows-version=${{ inputs.windows-version }}" >> $GITHUB_ENV
        elif [[ "${{ inputs.windows }}" == "true" ]]
        then
          echo "::warning title=Legacy option `windows`::Windows fallback enabled: ${{ inputs.windows }}"
          echo "WINDOWS=--windows" >> $GITHUB_ENV
        else echo "WINDOWS=" >> $GITHUB_ENV
        fi


    - name: Set up macOS options
      shell: bash
      run: |
        echo "::debug::macOS: ${{ inputs.macos-version }}"
        if [[ "${{ inputs.macos-version }}" != "" ]]
        then
          echo "::debug::macOS explicit version enabled: ${{ inputs.macos-version }}"
          echo "MACOS=--macos-version=${{ inputs.macos-version }}" >> $GITHUB_ENV
        elif [[ "${{ inputs.macos }}" == "true" ]]
        then
          echo "::warning title=Legacy option `macos`::macOS fallback enabled: ${{ inputs.macos }}"
          echo "MACOS=--macos" >> $GITHUB_ENV
        else echo "MACOS=" >> $GITHUB_ENV
        fi

    - name: Set up Ubuntu options
      shell: bash
      run: |
        echo "::debug::ubuntu: ${{ inputs.ubuntu-version }}"
        if [[ "${{ inputs.ubuntu-version }}" != "" ]]
        then
          echo "::debug::Ubuntu explicit version enabled: ${{ inputs.ubuntu-version }}"
          echo "UBUNTU=--ubuntu-version=${{ inputs.ubuntu-version }}" >> "$GITHUB_ENV"
        elif [[ "${{ inputs.ubuntu }}" == "true" ]]
        then
          echo "::warning title=Legacy option `ubuntu`::Ubuntu fallback enabled: ${{ inputs.ubuntu }}"
          echo "UBUNTU=--ubuntu" >> $GITHUB_ENV
        else echo "UBUNTU=" >> $GITHUB_ENV
        fi
 
    - name: Set up `oldest` and `newest` options
      shell: bash
      run: |
        echo "::debug::Is --newest enabled: ${{ inputs.newest }}"
        echo "::debug::Is --oldest enabled: ${{ inputs.oldest }}"

        if [[ "${{ inputs.oldest }}" == "true" && "${{ inputs.newest }}" == "true" ]]; then
          echo "::error title=Incompatible options::You cannot use the 'oldest' and 'newest' options together!"
          exit 1
        fi

        if [[ "${{ inputs.oldest }}" == "true" ]]
        then
          echo "::debug::oldest version enabled"
          echo "RELATIVE_VERSION=--oldest" >> "$GITHUB_ENV"
        elif [[ "${{ inputs.newest }}" == "true" ]]
        then
          echo "::debug::newest version enabled"
          echo "RELATIVE_VERSION=--newest" >> "$GITHUB_ENV"
        else
          echo "::debug::No relative version selected"
        fi
          

    - name: Extract the tested GHC versions
      id: set-matrix
      shell: bash
      run: |
        case "$(uname | tr '[:upper:]' '[:lower:]')" in
          msys*|mingw*|cygwin*)
          echo "Running in Windows -> use WSL"
          wsl bash -c "./get-tested $WINDOWS $MACOS $UBUNTU $RELATIVE_VERSION ${{ inputs.cabal-file }}" >> "$GITHUB_OUTPUT"
          ;;
        *)
          echo "Running on Linux/macOS -> run natively"
          ./get-tested $WINDOWS $MACOS $UBUNTU $RELATIVE_VERSION "${{ inputs.cabal-file }}" >> "$GITHUB_OUTPUT"
          ;;
        esac


branding:
  icon: 'list'
  color: 'blue'
